// generated by jsonenums -type=deliveryResult; DO NOT EDIT

package main

import (
	"encoding/json"
	"fmt"
)

var (
	_deliveryResultNameToValue = map[string]deliveryResult{
		"delivered":    delivered,
		"networkError": networkError,
		"blocked":      blocked,
		"badRequest":   badRequest,
		"userNotFound": userNotFound,
		"apiRetired":   apiRetired,
	}

	_deliveryResultValueToName = map[deliveryResult]string{
		delivered:    "delivered",
		networkError: "networkError",
		blocked:      "blocked",
		badRequest:   "badRequest",
		userNotFound: "userNotFound",
		apiRetired:   "apiRetired",
	}
)

func init() {
	var v deliveryResult
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_deliveryResultNameToValue = map[string]deliveryResult{
			interface{}(delivered).(fmt.Stringer).String():    delivered,
			interface{}(networkError).(fmt.Stringer).String(): networkError,
			interface{}(blocked).(fmt.Stringer).String():      blocked,
			interface{}(badRequest).(fmt.Stringer).String():   badRequest,
			interface{}(userNotFound).(fmt.Stringer).String(): userNotFound,
			interface{}(apiRetired).(fmt.Stringer).String():   apiRetired,
		}
	}
}

// MarshalJSON is generated so deliveryResult satisfies json.Marshaler.
func (r deliveryResult) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _deliveryResultValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid deliveryResult: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so deliveryResult satisfies json.Unmarshaler.
func (r *deliveryResult) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("deliveryResult should be a string, got %s", data)
	}
	v, ok := _deliveryResultNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid deliveryResult %q", s)
	}
	*r = v
	return nil
}
